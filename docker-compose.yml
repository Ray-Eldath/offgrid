version: "3.5"

services:

  mysql:
    image: mysql:latest
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ~/offgrid/db_data:/var/lib/mysql
      - ./database_init.mysql.sql:/docker-entrypoint-initdb.d/database_init.mysql.sql:ro
    ports:
      - "127.0.0.1:3306:3306"
    networks:
      - offgrid
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${OFFGRID_DATABASE_ROOT_PASSWORD}
      - MYSQL_DATABASE=offgrid
      - MYSQL_USER=offgrid
      - MYSQL_PASSWORD=${OFFGRID_DATABASE_PASSWORD}
      - TZ=Asia/Shanghai
    labels:
      - "traefik.enable=false"

  graphite:
    image: graphiteapp/graphite-statsd
    restart: always
    ports:
      - "127.0.0.1:8100:80"
      - "127.0.0.1:2003-2004:2003-2004"
      - "127.0.0.1:2023-2024:2023-2024"
      - "127.0.0.1:8125:8125/udp"
      - "127.0.0.1:8126:8126"
    networks:
      - offgrid
    labels:
      - "traefik.enable=false"

  grafana:
    depends_on:
      - mysql
    image: grafana/grafana:latest
    volumes:
      - ~/offgrid/grafana_data:/var/lib/grafana:Z
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - offgrid
    environment:
      - GF_AUTH_BASIC=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${OFFGRID_GRAFANA_OAUTH_CLIENT_SECRET}
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile grafana
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=${OFFGRID_HOST}/service/oauth/oauth2/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=${OFFGRID_HOST}/service/oauth/oauth2/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=${OFFGRID_HOST}/service/oauth/userinfo
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=role
      - GF_AUTH_GENERIC_OAUTH_NAME=Offgrid
      - GF_DATABASE_URL=mysql://root:${OFFGRID_DATABASE_ROOT_PASSWORD}@mysql:3306/grafana
      - GF_DATABASE_TYPE=mysql
      - GF_SERVER_ROOT_URL=${OFFGRID_GRAFANA_HOST}
      - GF_SERVER_DOMAIN=grafana.${OFFGRID_DOMAIN}
    labels:
      - "traefik.http.routers.grafana.rule=Host(`grafana.${OFFGRID_DOMAIN}`)"
      - "traefik.http.routers.grafana.middlewares=compress,redirect-to-https"
      - "traefik.http.routers.grafana.entrypoints=web,websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=mainresolver"

  hydra:
    depends_on:
      - hydra-migrate
    image: oryd/hydra:latest
    ports:
      - "127.0.0.1:4444:4444" # Public port
      - "127.0.0.1:4445:4445" # Admin port
      - "127.0.0.1:5555:5555" # Port for hydra token user
    networks:
      - offgrid
    restart: unless-stopped
    command:
      serve all --dangerous-force-http --dangerous-allow-insecure-redirect-urls=${OFFGRID_GRAFANA_HOST}/login/generic_oauth
    environment:
      - URLS_SELF_ISSUER=${OFFGRID_HOST}/service/oauth
      - URLS_LOGIN=${OFFGRID_HOST}/hydra/login
      - URLS_CONSENT=${OFFGRID_HOST}/hydra/consent
      - URLS_LOGOUT=${OFFGRID_HOST}/hydra/logout # currently unsupported
      - DSN=mysql://root:${OFFGRID_DATABASE_ROOT_PASSWORD}@tcp(mysql:3306)/hydra?max_conns=20&max_idle_conns=4
      - SECRETS_SYSTEM=${OFFGRID_HYDRA_SECRETS_SYSTEM}
    labels:
      - "traefik.http.middlewares.stripprefix-hydra.stripprefix.prefixes=/service/oauth"
      - "traefik.http.services.hydra.loadbalancer.server.port=4444"
      - "traefik.http.routers.hydra.rule=Path(`/service/oauth`)"
      - "traefik.http.routers.hydra.middlewares=stripprefix-hydra,compress,redirect-to-https"
      - "traefik.http.routers.hydra.entrypoints=web,websecure"
      - "traefik.http.routers.hydra.tls=true"
      - "traefik.http.routers.hydra.tls.certresolver=mainresolver"

  hydra-migrate:
    depends_on:
      - mysql
    image: oryd/hydra
    environment:
      - DSN=mysql://root:${OFFGRID_DATABASE_ROOT_PASSWORD}@tcp(mysql:3306)/hydra?max_conns=20&max_idle_conns=4
    networks:
      - offgrid
    command:
      migrate sql -e --yes
    restart: on-failure
    labels:
      - "traefik.enable=false"

  hydra-init:
    depends_on:
      - hydra-migrate
    image: oryd/hydra
    environment:
      - HYDRA_ADMIN_URL=http://hydra:4445
    networks:
      - offgrid
    command: |
      clients create
      --skip-tls-verify \
      --id grafana \
      --secret ${OFFGRID_GRAFANA_OAUTH_CLIENT_SECRET} \
      --grant-types authorization_code,refresh_token,client_credentials,implicit \
      --response-types token,code,id_token \
      --scope openid,profile,grafana \
      --callbacks ${OFFGRID_GRAFANA_HOST}/login/generic_oauth
    restart: on-failure
    labels:
      - "traefik.enable=false"

  caddy:
    build: "../ongrid"
    ports:
      - "127.0.0.1:8200:80"
    networks:
      - offgrid
    restart: always
    labels:
      - "traefik.http.routers.caddy.rule=Host(`${OFFGRID_DOMAIN}`)"
      - "traefik.http.routers.caddy.middlewares=compress,redirect-to-https"
      - "traefik.http.routers.caddy.entrypoints=web,websecure"
      - "traefik.http.routers.caddy.tls=true"
      - "traefik.http.routers.caddy.tls.certresolver=mainresolver"

  backend:
    depends_on:
      - mysql
    build: "."
    volumes:
      - ~/offgrid/backend_data/log:/offgrid/log
    ports:
      - "127.0.0.1:8190:8080"
    networks:
      - offgrid
    restart: always
    environment:
      - OFFGRID_HOST=${OFFGRID_HOST}
      - OFFGRID_HYDRA_ADMIN_HOST=http://hydra:4445
      - OFFGRID_GRAPHITE_HOST=graphite
      - OFFGRID_BACKEND_JDBC_URL=jdbc:mysql://mysql:3306/offgrid
      - OFFGRID_DATABASE_PASSWORD=${OFFGRID_DATABASE_PASSWORD}
      - OFFGRID_ALIYUN_DIRECTMAIL_REGION=${OFFGRID_ALIYUN_DIRECTMAIL_REGION}
      - OFFGRID_ALIYUN_DIRECTMAIL_ACCESS_KEY_ID=${OFFGRID_ALIYUN_DIRECTMAIL_ACCESS_KEY_ID}
      - OFFGRID_ALIYUN_DIRECTMAIL_ACCESS_KEY_SECRET=${OFFGRID_ALIYUN_DIRECTMAIL_ACCESS_KEY_SECRET}
    labels:
      - "traefik.http.routers.backend.rule=Host(`api.${OFFGRID_DOMAIN}`)"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=OPTIONS,GET,POST,PUT,PATCH,DELETE"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworigin=${OFFGRID_HOST}"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
      - "traefik.http.routers.backend.middlewares=cors,compress,redirect-to-https"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=mainresolver"

  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/offgrid/letsencrypt:/letsencrypt
    networks:
      - offgrid
    restart: always
    command:
      - "--api=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mainresolver.acme.httpchallenge.entrypoint=web"
      #      - "--certificatesresolvers.mainresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.mainresolver.acme.email=${OFFGRID_ACME_EMAIL}"
      - "--certificatesresolvers.mainresolver.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.http.middlewares.compress.compress=true"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${OFFGRID_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=compress"
      - "traefik.http.routers.traefik.entrypoints=web"

networks:
  offgrid:
    name: offgrid